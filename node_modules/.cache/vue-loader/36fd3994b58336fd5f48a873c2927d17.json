{"remainingRequest":"/home/samuel/Desktop/Lynk/commentsystem/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/samuel/Desktop/Lynk/commentsystem/src/App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/samuel/Desktop/Lynk/commentsystem/src/App.vue","mtime":1574647911420},{"path":"/home/samuel/Desktop/Lynk/commentsystem/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuel/Desktop/Lynk/commentsystem/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/samuel/Desktop/Lynk/commentsystem/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/samuel/Desktop/Lynk/commentsystem/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuel/Desktop/Lynk/commentsystem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuel/Desktop/Lynk/commentsystem/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2FwcCB7CiAgICBmb250LWZhbWlseTogJ0F2ZW5pcicsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgY29sb3I6ICMyYzNlNTA7CiAgICBtYXJnaW4tdG9wOiA2MHB4Owp9CgouY29tbWVudC1hcmVhIHsKICAgIHRleHRhcmVhIHsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBoZWlnaHQ6IDEwMHB4OwogICAgfQoKICAgIC5kYW5nZXIgewogICAgICAgIGNvbG9yOiByZWQ7CiAgICB9Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div id=\"app\">\n        <HelloWorld msg=\"Comment System\" />\n        <div class=\"comment-area\">\n            <textarea v-model=\"comment\" :maxlength=\"textLength\" data-cy=\"comment-input\"></textarea>\n            <p class=\"danger\" v-text=\"(textLength - comment.length) + ' remaining'\"></p>\n            <p class=\"danger\" v-if=\"emptyMessage\">{{emptyMessage}}</p>\n            <button type=\"submit\" @click=\"submitComment\" data-cy=\"submit-comment\"> Submit </button>\n        </div>\n        <div>\n            <h3>Comments</h3>\n            <button @click=\"oldest\">Oldest to newest</button>\n            <button @click=\"newest\">Newest to Oldest</button>\n            <button @click=\"shortest\">Shortest to longest</button>\n            <button @click=\"longest\">Longest to shortest</button>\n        </div>\n        <Comments v-for=\"(item,index) in filter(items)\" :key=\"'comment' + index\" :comment=\"item.comment\"\n            :date=\"item.date\" :commentId=\"item.commentId\" />\n        <h3>Trash</h3>\n        <Trash />\n    </div>\n</template>\n<script>\n    import HelloWorld from './components/HelloWorld.vue'\n    import Comments from './components/Comments.vue'\n    import Trash from './components/Trash.vue'\n    import * as moment from 'moment';\n\n    export default {\n        name: 'app',\n        components: {\n            HelloWorld,\n            Comments,\n            Trash,\n\n        },\n        data() {\n            return {\n                textLength: 20,\n                comment: '',\n                emptyMessage: '',\n                byDate: false,\n                byLength: false,\n                oldestToNewest: false,\n                newestToOldest: false,\n                shortestToLongest: false,\n                longestToShortest: false,\n\n\n\n            }\n        },\n        methods: {\n            submitComment() {\n                /*to ensure consistency of the primary key in a mysql manner i increment\n                the id of the last object in the comments array.This is handy when deleting\n                and associating comments to replies\n                */\n                let commentsLength = this.commentsCount;\n                let commentsArray = this.items;\n                let id;\n                if (commentsLength - 1 == -1) {\n                    id = 0;\n                } else {\n                    id = commentsArray[commentsLength - 1].commentId + 1;\n                }\n                /*ensure no empty comments are submitted*/\n\n                if (this.comment.length < 1) {\n                    this.emptyMessage = 'You cant post an empty comment.Please type something';\n                } else {\n                    this.emptyMessage = '';\n                    let latestComment = {\n                        date: this.currentDate,\n                        comment: this.comment,\n                        commentId: id,\n                        active: true\n                    }\n                    this.$store.commit('addComment', latestComment);\n                    this.comment = ''\n                }\n\n\n            }\n\n        },\n        computed: {\n            currentDate() {\n                return moment().format('llll');\n            },\n            commentsCount() {\n                return this.$store.getters.commentsCount\n            },\n            items() {\n                return this.$store.state.comments\n            },\n\n        },\n        methods: {\n            oldest() {\n                this.oldestToNewest = true;\n            },\n            newest() {\n                this.newestToOldest = true;\n            },\n            shortest() {\n                this.shortestToLongest = true;\n            },\n            longest() {\n                this.longestToShortest = true;\n            },\n            filter(items) {\n                if (oldestToNewest == true) {\n                    return this.items\n                } else if (newestToOldest == true) {\n\n                } else if (shortestToLongest == true) {\n\n                } else if (longestToShortest == true) {\n\n                } else {\n                    return this.items\n                }\n\n            }\n        }\n    }\n</script>\n<style lang=\"scss\">\n    #app {\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: left;\n        color: #2c3e50;\n        margin-top: 60px;\n    }\n\n    .comment-area {\n        textarea {\n            width: 100%;\n            height: 100px;\n        }\n\n        .danger {\n            color: red;\n        }\n    }\n</style>"]}]}