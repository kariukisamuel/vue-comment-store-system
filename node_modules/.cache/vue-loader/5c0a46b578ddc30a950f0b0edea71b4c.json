{"remainingRequest":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/samuel/Desktop/vuex-comment-reply-example/src/App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/samuel/Desktop/vuex-comment-reply-example/src/App.vue","mtime":1574652938712},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojYXBwIHsKICAgIGZvbnQtZmFtaWx5OiAnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsKICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICBjb2xvcjogIzJjM2U1MDsKICAgIG1hcmdpbi10b3A6IDYwcHg7Cn0KCi5jb21tZW50LWFyZWEgewogICAgdGV4dGFyZWEgewogICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgIGhlaWdodDogMTAwcHg7CiAgICB9CgogICAgLmRhbmdlciB7CiAgICAgICAgY29sb3I6IHJlZDsKICAgIH0KfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div id=\"app\">\n        <HelloWorld msg=\"Comment System\" />\n        <div class=\"comment-area\">\n            <textarea v-model=\"comment\" :maxlength=\"textLength\" data-cy=\"comment-input\"></textarea>\n            <p class=\"danger\" v-text=\"(textLength - comment.length) + ' remaining'\"></p>\n            <p class=\"danger\" v-if=\"emptyMessage\">{{emptyMessage}}</p>\n            <button type=\"submit\" @click=\"submitComment\" data-cy=\"submit-comment\"> Submit </button>\n        </div>\n        <div>\n            <h3>Comments</h3>\n     \n            <button @click=\"oldest\">Old to New</button>\n            <button @click=\"newest\">New to Old</button>\n            <button @click=\"shortest\">Short to Long</button>\n            <button @click=\"longest\">Long to Short</button>\n \n        </div>\n        <Comments v-for=\"(item,index) in filter()\" :key=\"'comment' + index\" :comment=\"item.comment\"\n            :date=\"item.date\" :commentId=\"item.commentId\" />\n        <h3>Trash</h3>\n        <Trash />\n    </div>\n</template>\n<script>\n    import HelloWorld from './components/HelloWorld.vue'\n    import Comments from './components/Comments.vue'\n    import Trash from './components/Trash.vue'\n    import * as moment from 'moment';\n\n    export default {\n        name: 'app',\n        components: {\n            HelloWorld,\n            Comments,\n            Trash,\n\n        },\n        data() {\n            return {\n                textLength: 20,\n                comment: '',\n                emptyMessage: '',\n                byDate: false,\n                byLength: false,\n                orderBy:'',\n\n\n\n\n            }\n        },\n        methods: {\n            oldest() {\n                this.orderBy = 'old';\n            },\n            newest() {\n                this.orderBy = 'new';\n            },\n            shortest() {\n                this.orderBy = 'short';\n            },\n            longest() {\n                this.orderBy = 'long';\n            },\n            filter() {\n                if (this.orderBy == 'old') {\n                    return this.items.slice().sort((a, b) => (a.commentId > b.commentId) ? 1 : -1)            \n                } else if (this.orderBy == 'new') {\n   \n                    return this.items.slice().sort((a, b) => (a.commentId < b.commentId) ? 1 : -1)  \n                } else if (this.orderBy == 'short') {\n \n                    return this.items.slice().sort((a, b) => (a.comment.length > b.comment.length) ? 1 : -1)\n                } else if (this.orderBy == 'long') {\n          \n                    return this.items.slice().sort((a, b) => (a.comment.length < b.comment.length) ? 1 : -1)\n                } else {\n                    return this.items\n                }\n\n            },\n            submitComment() {\n                /*to ensure consistency of the primary key in a mysql manner i increment\n                the id of the last object in the comments array.This is handy when deleting\n                and associating comments to replies\n                */\n                let commentsLength = this.commentsCount;\n                let commentsArray = this.items;\n                let id;\n                if (commentsLength - 1 == -1) {\n                    id = 0;\n                } else {\n                    id = commentsArray[commentsLength - 1].commentId + 1;\n                }\n                /*ensure no empty comments are submitted*/\n\n                if (this.comment.length < 1) {\n                    this.emptyMessage = 'You cant post an empty comment.Please type something';\n                } else {\n                    this.emptyMessage = '';\n                    let latestComment = {\n                        date: this.currentDate,\n                        comment: this.comment,\n                        commentId: id,\n                        active: true\n                    }\n                    this.$store.commit('addComment', latestComment);\n                    this.comment = ''\n                }\n\n\n            }\n\n        },\n        computed: {\n            currentDate() {\n                return moment().format('llll');\n            },\n            commentsCount() {\n                return this.$store.getters.commentsCount\n            },\n            items() {\n                return this.$store.state.comments\n            },\n\n        },\n\n    }\n</script>\n<style lang=\"scss\">\n    #app {\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: left;\n        color: #2c3e50;\n        margin-top: 60px;\n    }\n\n    .comment-area {\n        textarea {\n            width: 100%;\n            height: 100px;\n        }\n\n        .danger {\n            color: red;\n        }\n    }\n</style>"]}]}