{"remainingRequest":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/samuel/Desktop/vuex-comment-reply-example/src/components/Comments.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/samuel/Desktop/vuex-comment-reply-example/src/components/Comments.vue","mtime":1574592928976},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuel/Desktop/vuex-comment-reply-example/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBSZXBsaWVzIGZyb20gJy4vUmVwbGllcy52dWUnCmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnOwpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAnQ29tbWVudHMnLAogICAgY29tcG9uZW50czogewogICAgICAgIFJlcGxpZXMsCiAgICB9LAogICAgcHJvcHM6IFsnY29tbWVudCcsICdkYXRlJywgJ2NvbW1lbnRJZCddLAogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICByZXBseTogJycsCiAgICAgICAgICAgIHJlcGx5Q29tbWVudEJveDogZmFsc2UsCiAgICAgICAgICAgIGVtcHR5TWVzc2FnZTonJywKICAgICAgIAogICAgICAgIH0KICAgIH0sCiAgICBjb21wdXRlZDogewoKICAgICAgICBjdXJyZW50RGF0ZSgpIHsKICAgICAgICAgICAgcmV0dXJuIG1vbWVudCgpLmZvcm1hdCgnbGxsbCcpOwogICAgICAgIH0sCiAgICAgICAgY29tbWVudHMoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5jb21tZW50cwogICAgICAgIH0sCiAgICAgICAgaXRlbXMoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5yZXBsaWVzCiAgICAgICAgfSwKICAgICAgICBmaWx0ZXJlZEl0ZW1zKCkgewogICAgICAgICAgICAvL2ZpbHRlciByZXBsaWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgY29tbWVudHMKICAgICAgICAgICAgIGNvbnN0IGZpbHRlckJ5SWQgPSAoaXRlbSkgPT57CiAgICAgICAgICAgICAgICBpZihpdGVtLmNvbW1lbnRJZCA9PSB0aGlzLmNvbW1lbnRJZCl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5yZXBsaWVzLmZpbHRlcihmaWx0ZXJCeUlkKTsKCiAgICAgICAgfSwKICAgICAgICByZXBseUNvdW50KCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5yZXBseUNvdW50CiAgICAgICAgfSwKCiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIHNob3dSZXBseUJveCgpIHsKICAgICAgICAgICAgdGhpcy5yZXBseUNvbW1lbnRCb3ggPSB0cnVlCiAgICAgICAgfSwKCiAgICAgICAgc3VibWl0UmVwbHkoKSB7CiAgICAgICAgICAgIC8qdG8gZW5zdXJlIGNvbnNpc3RlbmN5IG9mIHRoZSBwcmltYXJ5IGtleSBpbiBhIG15c3FsIG1hbm5lciBpIGluY3JlbWVudAogICAgICAgICAgICB0aGUgaWQgb2YgdGhlIGxhc3Qgb2JqZWN0IGluIHRoZSByZXBsaWVzIGFycmF5LgogICAgICAgICAgICAqLwogICAgICAgICAgICBsZXQgcmVwbGllc0xlbmd0aCA9IHRoaXMucmVwbHlDb3VudDsKICAgICAgICAgICAgbGV0IHJlcGxpZXNBcnJheSA9IHRoaXMuaXRlbXM7CiAgICAgICAgICAgIGxldCBpZDsKICAgICAgICAgICAgaWYgKHJlcGxpZXNMZW5ndGggLSAxID09IC0xKSB7CiAgICAgICAgICAgICAgICBpZCA9IDA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZCA9IHJlcGxpZXNBcnJheVtyZXBsaWVzTGVuZ3RoIC0gMV0ucmVwbHlJZCArIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyplbnN1cmUgbm8gZW1wdHkgcmVwbGllcyBhcmUgc3VibWl0dGVkKi8KCiAgICAgICAgICAgIGlmICh0aGlzLnJlcGx5Lmxlbmd0aCA8IDEpIHsKICAgICAgICAgICAgICAgIHRoaXMuZW1wdHlNZXNzYWdlID0gJ1lvdSBjYW50IHBvc3QgYW4gZW1wdHkgcmVwbHkuUGxlYXNlIHR5cGUgc29tZXRoaW5nJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZW1wdHlNZXNzYWdlID0gJyc7CiAgICAgICAgICAgIC8vdXNpbmcgY29tbWVudElkIHRvIHRyYWNrIGFsbCByZXBsaWVzIGJlbG9uZ2luZyB0byBjb21tZW50ICAgIAogICAgICAgICAgICBsZXQgbGF0ZXN0UmVwbHkgPSB7CiAgICAgICAgICAgICAgICBkYXRlOiB0aGlzLmN1cnJlbnREYXRlLAogICAgICAgICAgICAgICAgcmVwbHk6IHRoaXMucmVwbHksCiAgICAgICAgICAgICAgICBjb21tZW50SWQ6IHRoaXMuY29tbWVudElkLAogICAgICAgICAgICAgICAgcmVwbHlJZDogaWQsCiAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2FkZFJlcGx5JywgbGF0ZXN0UmVwbHkpCiAgICAgICAgICAgIHRoaXMucmVwbHkgPSAnJwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB0cmFzaENvbW1lbnQoY29tbWVudElkKXsKICAgICAgICAgICAgLy8gcGVyZm9ybSBhIHNvZnQgZGVsZXRlIG9uIGNvbW1lbnQKICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdzb2Z0RGVsZXRlQ29tbWVudCcsY29tbWVudElkKQoKICAgICAgICB9CgogICAgfQogICAgfQo="},{"version":3,"sources":["Comments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA","file":"Comments.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"comment-listings\">\n        <div class=\"comment\">\n            <p>{{comment}}</p>\n            <div class=\"flex reply-delete-buttons\">\n                <span @click=\"showReplyBox\" ><i class=\"fas fa-reply\"></i>Reply</span>\n                <span @click=\"trashComment(commentId)\"><i class=\"fas fa-trash-alt\"></i>Delete</span>\n            </div>\n            <p class=\"date\">{{date}}\n            </p>\n\n            <div class=\"reply-comment-input\" v-show=\"replyCommentBox\">\n                <input type=\"text\" v-model=\"reply\">\n                <button @click=\"submitReply\">Submit</button>\n                <p class=\"danger\" v-if=\"emptyMessage\">{{emptyMessage}}</p>\n            </div>\n            <Replies v-for=\"(item,index) in filteredItems\" :key=\"'reply'+index\" :replies=\"item.reply\" :date=\"item.date \"\n                :replyId=\"item.replyId\"></Replies>\n\n        </div>\n    </div>\n</template>\n<script>\n    import Replies from './Replies.vue'\n    import * as moment from 'moment';\n    export default {\n        name: 'Comments',\n        components: {\n            Replies,\n        },\n        props: ['comment', 'date', 'commentId'],\n        data() {\n            return {\n                reply: '',\n                replyCommentBox: false,\n                emptyMessage:'',\n           \n            }\n        },\n        computed: {\n\n            currentDate() {\n                return moment().format('llll');\n            },\n            comments() {\n                return this.$store.state.comments\n            },\n            items() {\n                return this.$store.state.replies\n            },\n            filteredItems() {\n                //filter replies to their respective comments\n                 const filterById = (item) =>{\n                    if(item.commentId == this.commentId){\n                        return true;\n                    }\n                 }\n                return this.$store.state.replies.filter(filterById);\n\n            },\n            replyCount() {\n                return this.$store.getters.replyCount\n            },\n\n        },\n        methods: {\n            showReplyBox() {\n                this.replyCommentBox = true\n            },\n\n            submitReply() {\n                /*to ensure consistency of the primary key in a mysql manner i increment\n                the id of the last object in the replies array.\n                */\n                let repliesLength = this.replyCount;\n                let repliesArray = this.items;\n                let id;\n                if (repliesLength - 1 == -1) {\n                    id = 0;\n                } else {\n                    id = repliesArray[repliesLength - 1].replyId + 1;\n                }\n                /*ensure no empty replies are submitted*/\n\n                if (this.reply.length < 1) {\n                    this.emptyMessage = 'You cant post an empty reply.Please type something';\n                } else {\n                    this.emptyMessage = '';\n                //using commentId to track all replies belonging to comment    \n                let latestReply = {\n                    date: this.currentDate,\n                    reply: this.reply,\n                    commentId: this.commentId,\n                    replyId: id,\n                    active: true\n                }\n                this.$store.commit('addReply', latestReply)\n                this.reply = ''\n                }\n            },\n            trashComment(commentId){\n                // perform a soft delete on comment\n                this.$store.commit('softDeleteComment',commentId)\n    \n            }\n\n        }\n        }\n</script>\n<style lang=\"scss\" scoped>\n    .comment-listings {\n        .comment {\n            background: aliceblue;\n            padding: 1rem;\n            margin: 1rem 0;\n\n            .reply-delete-buttons {\n                span {\n                    padding: 0 2rem;\n                }\n            }\n\n            .reply-comment-input {\n                margin: 1rem 0;\n\n                input {\n                    width: 100%;\n                    height: 60px;\n                }\n\n                button {\n                    background-color: darkviolet;\n                    padding: 0.5rem;\n                    color: #fff;\n                    margin: 0.5rem 0;\n\n                }\n            }\n\n            .date {\n                text-align: end;\n                margin: 0\n            }\n\n        }\n\n    }\n</style>"]}]}